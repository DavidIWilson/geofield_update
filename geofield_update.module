<?php

define('GEOFIELD_UPDATE_PROCESS_PER_CRON', 5);


/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function geofield_update_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#geofield_update":
      $output = '<p>'.  t("Automatically updates nodes with missing geofields each time the cron is run.") .'</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function geofield_update_permission() {
  return array(
    'administer geofield_update' => array(
      'title' => t('Administer Geofield Update'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function geofield_update_menu() {
  $items['admin/config/system/cron/geofield_update'] = array(
    'title' => 'Geofield Updater',
    'description' => 'Automatically update geofields that are missing data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geofield_update_admin_settings'),
    'access arguments' => array('administer geofield_update'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'geofield_update.admin.inc',
    'weight' => 1,
  );

  return $items;
}


/**
 * Administration page to set the default menu system
 *
 * @return Drupal form
 */
function geofield_update_admin() {
	$form = array();

	$form['intrigue_memupload_maxfolders'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum number of folders'),
		'#default_value' => variable_get('intrigue_memupload_maxfolders', INTRIGUE_MEMUPLOAD_MAXFOLDERS),
		'#size' => 3,
		'#maxlength' => 3,
		'#description' => t("The maximum number of folders that can be created.  Set to 0 for unlimited."),
		'#required' => TRUE,
	);

	$form['intrigue_memupload_filedirectory'] = array(
		'#type' => 'textfield',
		'#title' => t('Where are files stored?'),
		'#default_value' => variable_get('intrigue_memupload_filedirectory', INTRIGUE_MEMUPLOAD_FILEDIRECTORY),
		'#size' => 60,
		'#maxlength' => 255,
		'#description' => t("The relative location for the file directory (must be writeable).  This should begin with a slash /"),
		'#required' => TRUE,
	);

	return system_settings_form($form);
}

function geofield_update_cron() {

  // get the number of nodes to process
  $numupdated = 0;
  $nodes = array();
  $updated_nids = array();
  $skipped_nids = array();


  $contenttypes = variable_get('geofield_update_content_types', array());
  $ctypes = array();
  foreach ($contenttypes as $value) if ($value) $ctypes[] = $value;


  if (!empty($ctypes)) {



    $nodes = db_query("SELECT nid, type
                        FROM {node}
                       WHERE type IN (:type)

                        AND nid NOT IN (
                                  SELECT entity_id
                                    FROM {field_data_field_geofield}
                                   WHERE bundle IN (:type) )
                        AND nid NOT IN (
                                  SELECT entity_id
                                    FROM {geofield_update}
                                   WHERE bundle IN  (:type) )
                      LIMIT ".variable_get('geofield_update_nodes_per_cron', GEOFIELD_UPDATE_PROCESS_PER_CRON)."
                       ",

                       array(':type' => $ctypes))->fetchAllAssoc("nid");


    if (!empty($nodes)) {

      foreach ($nodes as $node) {
        // update the node
        $mynode = node_load($node->nid);
        node_save($mynode);
        $numupdated++;
      }
    }

    // get nodes updated from group of node_ids
    $updated_nids = db_query("SELECT entity_id
                        FROM {field_data_field_geofield}
                       WHERE entity_id IN (:nids)", array(':nids' => array_keys($nodes)))
                    ->fetchAllAssoc("entity_id");


    // if we have nodes that were updated let's save them to the geofield_update table
    if (count($updated_nids) > 0) {

      $updatednodes = db_insert('geofield_update')->fields(array('bundle', 'entity_id', 'updated', 'created'));

      // save updated nids to geofield_update
      foreach($updated_nids as $value) {
        $updatednodes->values(array(
                          'bundle'=>$nodes[$value->entity_id]->type,
                          'entity_id'=>$nodes[$value->entity_id]->nid,
                          'updated'=>1,
                          'created' => REQUEST_TIME));
      }
      $d = $updatednodes->execute();
    }

    // get nodes skipped
    $skipped_nids = array_diff(array_keys($nodes), array_keys($updated_nids));

    // if we have nodes that were updated let's save them to the geofield_update table
    if (count($skipped_nids) > 0) {

      $skippednodes = db_insert('geofield_update')->fields(array('bundle', 'entity_id', 'updated', 'created'));

      // save skipped nids to geofield_update
      foreach($skipped_nids as $value) {
        $skippednodes->values(array(
                          'bundle'=>$nodes[$value->entity_id]->type,
                          'entity_id'=>$nodes[$value->entity_id]->nid,
                          'updated'=>0,
                          'created' => REQUEST_TIME));
      }

      $d = $updatednodes->execute();
    }

    print('<h4>$updatednodes</h4>');
    print_r($updatednodes);
    print('<h4>$skippednodes</h4>');
    print_r($skippednodes);
    die();


    if ($numupdated) {
      // add link to every node
      //foreach ($node_ids as $key => $value) {
        //$node_ids[$key] = l($value, 'node/'.$value);
      //}

      watchdog('geofield_update', count($updated_nids) . ' geofield nodes updated. '.count($skipped_nids) . ' geofield nodes skipped.', array(), WATCHDOG_INFO);
    }

  }

}
